services:
  db:
    image: postgres:17
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5431:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network
      - monitoring_network

  admin-service:
    container_name: admin-service
    build: ./backend-services/admin-service
    ports:
      - "9091:9091"
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DEVTOOLS_RESTART_ENABLED: ${SPRING_DEVTOOLS_RESTART_ENABLED}
      SPRING_DEVTOOLS_LIVERELOAD_ENABLED: ${SPRING_DEVTOOLS_LIVERELOAD_ENABLED}
      FILE_UPLOAD_DIR: ${UPLOAD_DIR}
      # Monitoring configuration
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED: true
    volumes:
      - ./backend-services/admin-service/src/main/resources/uploads:/app/uploads
      - ./backend-services/admin-service/src:/build/src
      - ./backend-services/admin-service/target:/build/target
      - maven-repo:/root/.m2/repository
    networks:
      - app_network
      - monitoring_network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9091"
      - "prometheus.io/path=/actuator/prometheus"

  auth-service:
    container_name: auth-service
    build: ./backend-services/auth-service
    ports:
      - "9092:9092"
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DEVTOOLS_RESTART_ENABLED: ${SPRING_DEVTOOLS_RESTART_ENABLED}
      SPRING_DEVTOOLS_LIVERELOAD_ENABLED: ${SPRING_DEVTOOLS_LIVERELOAD_ENABLED}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      FILE_UPLOAD_DIR: ${UPLOAD_DIR}
      # Monitoring configuration
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED: true
    volumes:
      - ./backend-services/auth-service/src/main/resources/uploads:/app/uploads
      - ./backend-services/auth-service/src:/build/src
      - ./backend-services/auth-service/target:/build/target
      - maven-repo:/root/.m2/repository
    networks:
      - app_network
      - monitoring_network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9092"
      - "prometheus.io/path=/actuator/prometheus"

  parents-kids-service:
    container_name: parents-kids-service
    build: ./backend-services/parents_kids-service
    ports:
      - "9093:9093"
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DEVTOOLS_RESTART_ENABLED: ${SPRING_DEVTOOLS_RESTART_ENABLED}
      SPRING_DEVTOOLS_LIVERELOAD_ENABLED: ${SPRING_DEVTOOLS_LIVERELOAD_ENABLED}
      FILE_UPLOAD_DIR: ${UPLOAD_DIR}
      # Monitoring configuration
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED: true
    volumes:
      - ./backend-services/parents_kids-service/src/main/resources/uploads:/app/uploads
      - ./backend-services/parents_kids-service/src:/build/src
      - ./backend-services/parents_kids-service/target:/build/target
      - maven-repo:/root/.m2/repository
    networks:
      - app_network
      - monitoring_network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9093"
      - "prometheus.io/path=/actuator/prometheus"

  teachers-courses-service:
    container_name: teachers-courses-service
    build: ./backend-services/teachers_courses-service
    ports:
      - "9094:9094"
    depends_on:
      db:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DEVTOOLS_RESTART_ENABLED: ${SPRING_DEVTOOLS_RESTART_ENABLED}
      SPRING_DEVTOOLS_LIVERELOAD_ENABLED: ${SPRING_DEVTOOLS_LIVERELOAD_ENABLED}
      FILE_UPLOAD_DIR: ${UPLOAD_DIR}
      # Monitoring configuration
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED: true
    volumes:
      - ./backend-services/teachers_courses-service/src/main/resources/uploads:/app/uploads
      - ./backend-services/teachers_courses-service/src:/build/src
      - ./backend-services/teachers_courses-service/target:/build/target
      - maven-repo:/root/.m2/repository
    networks:
      - app_network
      - monitoring_network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9094"
      - "prometheus.io/path=/actuator/prometheus"

  api-gateway:
    build:
      context: ./backend-services/api-gateway
    environment:
      ADMIN_SERVICE_URI: ${ADMIN_SERVICE_URI}
      AUTH_SERVICE_URI: ${AUTH_SERVICE_URI}
      PARENTS_KIDS_SERVICE_URI: ${PARENTS_KIDS_SERVICE_URI}
      TEACHERS_COURSES_SERVICE_URI: ${TEACHERS_COURSES_SERVICE_URI}
      SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_DEVTOOLS_RESTART_ENABLED: ${SPRING_DEVTOOLS_RESTART_ENABLED}
      SPRING_DEVTOOLS_LIVERELOAD_ENABLED: ${SPRING_DEVTOOLS_LIVERELOAD_ENABLED}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      # Monitoring configuration
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_PROMETHEUS_ENABLED: true
    ports:
      - "9000:9000"
    depends_on:
      db:
        condition: service_healthy
      admin-service:
        condition: service_started
      auth-service:
        condition: service_started
      parents-kids-service:
        condition: service_started
      teachers-courses-service:
        condition: service_started
    volumes:
      - ./backend-services/api-gateway/src:/app/src
      - ./backend-services/api-gateway/target:/app/target
      - maven-repo:/root/.m2/repository
    networks:
      - app_network
      - monitoring_network
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9000"
      - "prometheus.io/path=/actuator/prometheus"

  frontend:
    container_name: nova-pioneers-front-end
    build:
      context: ./front-end
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    depends_on:
      - api-gateway
    volumes:
      - ./front-end:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=1
      - VITE_PORT=5173
    command: [ "npm", "run", "dev", "--", "--host" ]
    networks:
      - app_network

  # Monitoring Services
  prometheus:
    image: prom/prometheus:v3.2.0
    container_name: nova-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - monitoring_network
    labels:
      org.label-schema.group: "monitoring"

  grafana:
    image: grafana/grafana:12.0.1
    container_name: nova-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-nova_admin_2024}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring_network
    depends_on:
      - prometheus
    labels:
      org.label-schema.group: "monitoring"

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.2
    container_name: nova-postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - monitoring_network
    depends_on:
      - db
    labels:
      org.label-schema.group: "monitoring"

networks:
  app_network:
    driver: bridge
  monitoring_network:
    driver: bridge

volumes:
  postgres-data:
  maven-repo:
  prometheus_data:
  grafana_data: